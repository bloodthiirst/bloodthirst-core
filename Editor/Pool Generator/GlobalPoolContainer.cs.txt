using Bloodthirst.Core.Singleton;
using System.Collections.Generic;
using UnityEngine;
using Sirenix.OdinInspector;
using System.Linq;
using System;


namespace Bloodthirst.Core.AdvancedPool.Pools
{
    /// <summary>
    /// <para> This class is an auto-generated pools of the prefabs marked with the <see cref="GeneratePool"></see></para>
    /// <para> The pools are created in the "PoolScene" , a scene that is specifically made to contain thses auto-generated pools</para>
    /// <para> The pool generation is done by the <see cref="PoolGenerator"> class</see></para>
    /// </summary>
    public class GlobalPoolContainer : UnitySingleton<GlobalPoolContainer, IGlobalPool>, IGlobalPool
    {
        #region fields for the auto-generated pools

        // [START_POOLS]

        // [END_POOLS]

        #endregion

        [ShowInInspector]
        private List<IPoolBehaviour> allPools;

        public List<IPoolBehaviour> AllPools 
        {
            get
            {
                if(allPools == null)
                {
                    allPools = new List<IPoolBehaviour>();
                }

                return allPools;
            }
        }

        public IPoolBehaviour<T> GetByPrefab<T>(GameObject prefab) where T : Component
        {
            IPoolBehaviour pool = AllPools.Where(p => p.Type == typeof(T)).FirstOrDefault(p => p.Prefab == prefab);

            return (PoolBehaviour<T>) pool;
        }

        public IPoolBehaviour GetByPrefab(GameObject prefab)
        {
            IPoolBehaviour pool = AllPools.FirstOrDefault(p => p.Prefab == prefab);

            return pool;
        }

        public IPoolBehaviour<T> GetByType<T>() where T : Component
        {
            PoolBehaviour<T> pool = AllPools.FirstOrDefault(p => p.Type == typeof(T)) as PoolBehaviour<T>;

            return pool;
        }

        public IEnumerable<IPoolBehaviour<T>> GetAllByType<T>() where T : Component
        {
            return AllPools
                .Where(p => p.Type == typeof(T))
                .Cast<IPoolBehaviour<T>>();
        }

        T IGlobalPool.Get<T>()
        {
            return GetByType<T>().PoolWithType.Get();
        }

        void IGlobalPool.Return<T>(T t)
        {
            GetByType<T>().PoolWithType.Return(t);
        }

        T IGlobalPool.Get<T>(Predicate<T> filter)
        {
            return GetByType<T>().PoolWithType.Get<T>(filter);
        }

        public override void OnSetupSingleton()
        {
            // [LOAD_IN_LIST_START]

            // [LOAD_IN_LIST_END]
        }
    }
}
